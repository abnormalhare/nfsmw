ninja_required_version = 1.3

# The arguments passed to configure.py, for rerunning it.
configure_args = --no-progress
python = "C:\Python311\python.exe"

# Variables
ldflags = -fp hardware -nodefaults
mw_version = GC\1.3.2

# Tooling
rule download_tool
  command = $python tools\download_tool.py $tool $out --tag $tag
  description = TOOL $out
rule decompctx
  command = $python tools\decompctx.py $in -o $out -d $out.d $includes
  description = CTX $in
  depfile = $out.d
  deps = gcc
build build\tools\dtk.exe: download_tool | tools\download_tool.py
  tool = dtk
  tag = v1.4.1
build build\tools\objdiff-cli.exe: download_tool | tools\download_tool.py
  tool = objdiff-cli
  tag = v2.7.1
build build\tools\sjiswrap.exe: download_tool | tools\download_tool.py
  tool = sjiswrap
  tag = v1.2.0
build build\compilers: download_tool | tools\download_tool.py
  tool = compilers
  tag = 20240706
build build\binutils: download_tool | tools\download_tool.py
  tool = binutils
  tag = 2.42-1

# Download all tools
build tools: phony build\tools\dtk.exe build\tools\sjiswrap.exe $
    build\compilers build\binutils build\tools\objdiff-cli.exe

# Link ELF file
rule link
  command = build\compilers\$mw_version\mwldeppc.exe $ldflags -o $out $
      @$out.rsp
  description = LINK $out
  rspfile = $out.rsp
  rspfile_content = $in_newline

# Generate DOL
rule elf2dol
  command = build\tools\dtk.exe elf2dol $in $out
  description = DOL $out

# MWCC build
rule mwcc
  command = build\compilers\$mw_version\mwcceppc.exe $cflags -MMD -c $in -o $
      $basedir
  description = MWCC $out
  depfile = $basefile.d
  deps = gcc

# MWCC build (with UTF-8 to Shift JIS wrapper)
rule mwcc_sjis
  command = build\tools\sjiswrap.exe $
      build\compilers\$mw_version\mwcceppc.exe $cflags -MMD -c $in -o $basedir
  description = MWCC $out
  depfile = $basefile.d
  deps = gcc

# Assemble asm
rule as
  command = cmd /c build\binutils\powerpc-eabi-as.exe $asflags -o $out $in $
      -MD $out.d && build\tools\dtk.exe elf fixup $out $out
  description = AS $out
  depfile = $out.d
  deps = gcc

# Host build
host_cflags = -I include -Wno-trigraphs
host_cppflags = -std=c++98 -I include -fno-exceptions -fno-rtti $
    -D_CRT_SECURE_NO_WARNINGS -Wno-trigraphs -Wno-c++11-extensions
rule host_cc
  command = clang $host_cflags -c -o $out $in
  description = CC $out
rule host_cpp
  command = clang++ $host_cppflags -c -o $out $in
  description = CXX $out

build pre-compile: phony
# Source files
# Split DOL into relocatable objects
rule split
  command = build\tools\dtk.exe dol split $in $out_dir
  description = SPLIT $in
  depfile = $out_dir/dep
  deps = gcc
build build\GOWE69\config.json: split config\GOWE69\config.yml | $
    build\tools\dtk.exe
  out_dir = build\GOWE69

# Reconfigure on change
rule configure
  command = $python configure.py $configure_args
  description = RUN configure.py
  generator = 1
build build.ninja: configure | build\GOWE69\config.json configure.py $
    tools\project.py tools\ninja_syntax.py

# Default rule
default build\GOWE69\config.json
